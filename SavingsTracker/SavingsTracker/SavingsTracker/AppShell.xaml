<?xml version="1.0" encoding="UTF-8"?>
<Shell xmlns="http://xamarin.com/schemas/2014/forms" 
       xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
       xmlns:local="clr-namespace:SavingsTracker.Views"
       xmlns:fontAwesome="clr-namespace:FontAwesome"
       xmlns:vm="clr-namespace:SavingsTracker.ViewModels"
       Title="SavingsTracker"
       x:Class="SavingsTracker.AppShell"
       x:DataType="vm:AppShellViewModel"
       FlyoutBackgroundColor="{AppThemeBinding Light={StaticResource LightThemeSurface}, Dark={StaticResource DarkThemeSurface}}">

   <!--
        The overall app visual hierarchy is defined here, along with navigation.
    
        https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/
    -->

   <Shell.BindingContext>
      <vm:AppShellViewModel />
   </Shell.BindingContext>

   <Shell.Resources>
      <ResourceDictionary>
         <Style x:Key="BaseStyle" TargetType="Element">
            <!-- Shell navigation bar background color -->
            <Setter Property="Shell.BackgroundColor" Value="{AppThemeBinding Light={StaticResource LightThemeSurface}, Dark={StaticResource DarkThemeSurface}}" />
            <!-- Hamburger menu icon color -->
            <Setter Property="Shell.ForegroundColor" Value="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
            <!-- Shell navigation bar text color -->
            <Setter Property="Shell.TitleColor" Value="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
            <Setter Property="Shell.UnselectedColor" Value="{AppThemeBinding Light={StaticResource LightThemeBackground}, Dark={StaticResource DarkThemeBackground}}" />
            <Setter Property="Shell.TabBarBackgroundColor" Value="{AppThemeBinding Light={StaticResource LightThemeSurface}, Dark={StaticResource DarkThemeSurface}}" />
            <Setter Property="Shell.TabBarForegroundColor" Value="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}"/>
            <Setter Property="Shell.TabBarUnselectedColor" Value="{AppThemeBinding Light={StaticResource LightThemeBackground}, Dark={StaticResource DarkThemeBackground}}"/>
            <Setter Property="Shell.TabBarTitleColor" Value="{AppThemeBinding Light={StaticResource LightThemeOnBackground}, Dark={StaticResource DarkThemeOnBackground}}"/>
         </Style>
         <Style TargetType="TabBar" BasedOn="{StaticResource BaseStyle}" />
         <Style TargetType="FlyoutItem" BasedOn="{StaticResource BaseStyle}" />

         <!--
            Default Styles for all Flyout Items
            https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyoutitem-and-menuitem-style-classes
            -->
         
         <Style Class="FlyoutItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
            <Setter Property="VisualStateManager.VisualStateGroups">
               <VisualStateGroupList>
                  <VisualStateGroup x:Name="CommonStates">
                     <VisualState x:Name="Normal">
                        <VisualState.Setters>
                           <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor"
                                   Value="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
                           <Setter Property="BackgroundColor"
                                   Value="{AppThemeBinding Light={StaticResource LightThemeSurface}, Dark={StaticResource DarkThemeSurface}}" />
                        </VisualState.Setters>
                     </VisualState>
                     <VisualState x:Name="Selected">
                        <VisualState.Setters>
                           <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor"
                                   Value="{AppThemeBinding Light={StaticResource LightThemePrimary}, Dark={StaticResource DarkThemePrimary}}" />
                           <Setter Property="BackgroundColor"
                                   Value="{AppThemeBinding Light={StaticResource LightThemeBackground}, Dark={StaticResource DarkThemeBackground}}" />
                        </VisualState.Setters>
                     </VisualState>
                  </VisualStateGroup>
               </VisualStateGroupList>
            </Setter>
         </Style> 

         <Style TargetType="FlyoutItem" x:Key="SavingAccountsFlyoutItem" >
            <Style.Triggers>
               <Trigger TargetType="FlyoutItem" Property="IsChecked" Value="True">
                  <Setter Property="FlyoutIcon">
                     <Setter.Value>
                        <FontImageSource FontFamily="FAFS" Glyph="{x:Static fontAwesome:FontAwesomeIcons.ChartLine}"
                                         Color="{AppThemeBinding Light={StaticResource LightThemePrimary}, Dark={StaticResource DarkThemePrimary}}" />
                     </Setter.Value>
                  </Setter>
               </Trigger>
               <Trigger TargetType="FlyoutItem" Property="IsChecked" Value="False">
                  <Setter Property="FlyoutIcon">
                     <Setter.Value>
                        <FontImageSource FontFamily="FAFS" Glyph="{x:Static fontAwesome:FontAwesomeIcons.ChartLine}"
                                         Color="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
                     </Setter.Value>
                  </Setter>
               </Trigger>
            </Style.Triggers>
         </Style>

         <Style TargetType="FlyoutItem" x:Key="OptionsFlyoutItem" >
            <Style.Triggers>
               <Trigger TargetType="FlyoutItem" Property="IsChecked" Value="True">
                  <Setter Property="FlyoutIcon">
                     <Setter.Value>
                        <FontImageSource FontFamily="FAFS" Glyph="{x:Static fontAwesome:FontAwesomeIcons.Cog}"
                                         Color="{AppThemeBinding Light={StaticResource LightThemePrimary}, Dark={StaticResource DarkThemePrimary}}" />
                     </Setter.Value>
                  </Setter>
               </Trigger>
               <Trigger TargetType="FlyoutItem" Property="IsChecked" Value="False">
                  <Setter Property="FlyoutIcon">
                     <Setter.Value>
                        <FontImageSource FontFamily="FAFS" Glyph="{x:Static fontAwesome:FontAwesomeIcons.Cog}"
                                         Color="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
                     </Setter.Value>
                  </Setter>
               </Trigger>
            </Style.Triggers>
         </Style>

         <Style TargetType="FlyoutItem" x:Key="MonthlyIncomeExpenseFlyoutItem" >
            <Style.Triggers>
               <Trigger TargetType="FlyoutItem" Property="IsChecked" Value="True">
                  <Setter Property="FlyoutIcon">
                     <Setter.Value>
                        <FontImageSource FontFamily="FAFS" Glyph="{x:Static fontAwesome:FontAwesomeIcons.Wallet}"
                                         Color="{AppThemeBinding Light={StaticResource LightThemePrimary}, Dark={StaticResource DarkThemePrimary}}" />
                     </Setter.Value>
                  </Setter>
               </Trigger>
               <Trigger TargetType="FlyoutItem" Property="IsChecked" Value="False">
                  <Setter Property="FlyoutIcon">
                     <Setter.Value>
                        <FontImageSource FontFamily="FAFS" Glyph="{x:Static fontAwesome:FontAwesomeIcons.Wallet}"
                                         Color="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
                     </Setter.Value>
                  </Setter>
               </Trigger>
            </Style.Triggers>
         </Style>

         <!--
            Custom Style you can apply to any Flyout Item
            -->
         <Style Class="MenuItemLayoutStyle" TargetType="Layout" ApplyToDerivedTypes="True">
            <Setter Property="VisualStateManager.VisualStateGroups">
               <VisualStateGroupList>
                  <VisualStateGroup x:Name="CommonStates">
                     <VisualState x:Name="Normal">
                        <VisualState.Setters>
                           <Setter TargetName="FlyoutItemLabel" Property="Label.TextColor"
                                   Value="{AppThemeBinding Light={StaticResource LightThemeOnSurface}, Dark={StaticResource DarkThemeOnSurface}}" />
                        </VisualState.Setters>
                     </VisualState>
                  </VisualStateGroup>
               </VisualStateGroupList>
            </Setter>
         </Style>
      </ResourceDictionary>
   </Shell.Resources>

   <Shell.FlyoutHeaderTemplate>
      <DataTemplate>
         <Grid BackgroundColor="{AppThemeBinding Light={StaticResource LightThemePrimaryVariant}, Dark={StaticResource DarkThemePrimaryVariant}}"
               HeightRequest="100">
            <Label Text="MP Savings Tracker"
                   TextColor="{AppThemeBinding Light={StaticResource LightThemeOnPrimaryVariant}, Dark={StaticResource DarkThemeOnPrimaryVariant}}"
                   FontSize="20"
                   FontAttributes="Bold"
                   HorizontalTextAlignment="Center"
                   VerticalTextAlignment="Center" />
         </Grid>
      </DataTemplate>
   </Shell.FlyoutHeaderTemplate>

   <Shell.NavBarHasShadow>True</Shell.NavBarHasShadow>

   <!-- 
        When the Flyout is visible this defines the content to display in the flyout.
        FlyoutDisplayOptions="AsMultipleItems" will create a separate flyout item for each child element    
        https://docs.microsoft.com/dotnet/api/xamarin.forms.shellgroupitem.flyoutdisplayoptions?view=xamarin-forms
    -->
   <FlyoutItem Title="{Binding SavingAccounts.Localized, Mode=OneWay}" Style="{StaticResource SavingAccountsFlyoutItem}" >
      <ShellContent Route="SavingAccountssPage" ContentTemplate="{DataTemplate local:SavingAccountsPage}" />
   </FlyoutItem>

   <FlyoutItem Title="{Binding MonthlyIncomeExpense.Localized, Mode=OneWay}" Style="{StaticResource MonthlyIncomeExpenseFlyoutItem}" >
      <ShellContent Route="MonthlyIncomeExpensePage" ContentTemplate="{DataTemplate local:MonthlyIncomeExpensePage}" />
   </FlyoutItem>

   <FlyoutItem Title="{Binding Options.Localized, Mode=OneWay}" Style="{StaticResource OptionsFlyoutItem}" >
      <ShellContent Route="OptionsPage" ContentTemplate="{DataTemplate local:OptionsPage}" />
   </FlyoutItem>

   <!-- When the Flyout is visible this will be a menu item you can tie a click behavior to  -->
   <!--
   <MenuItem Text="Logout" StyleClass="MenuItemLayoutStyle" Clicked="OnMenuItemClicked">
   </MenuItem>
   -->
   <!--
        TabBar lets you define content that won't show up in a flyout menu. When this content is active
        the flyout menu won't be available. This is useful for creating areas of the application where 
        you don't want users to be able to navigate away from. If you would like to navigate to this 
        content you can do so by calling 
        await Shell.Current.GoToAsync("//LoginPage");
    -->
   <!--
   <TabBar>
      <ShellContent Route="LoginPage" ContentTemplate="{DataTemplate local:LoginPage}" />
   </TabBar>
   -->

   <!-- Optional Templates 
    // These may be provided inline as below or as separate classes.

    // This header appears at the top of the Flyout.
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#flyout-header
    <Shell.FlyoutHeaderTemplate>
        <DataTemplate>
            <Grid>ContentHere</Grid>
        </DataTemplate>
    </Shell.FlyoutHeaderTemplate>

    // ItemTemplate is for ShellItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-flyoutitem-appearance
    <Shell.ItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Title, Icon
            </ContentView>
        </DataTemplate>
    </Shell.ItemTemplate>

    // MenuItemTemplate is for MenuItems as displayed in a Flyout
    // https://docs.microsoft.com/xamarin/xamarin-forms/app-fundamentals/shell/flyout#define-menuitem-appearance
    <Shell.MenuItemTemplate>
        <DataTemplate>
            <ContentView>
                Bindable Properties: Text, Icon
            </ContentView>
        </DataTemplate>
    </Shell.MenuItemTemplate>

    -->

</Shell>
